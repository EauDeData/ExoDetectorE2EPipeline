#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri May  8 18:15:31 2020

@author: gerard
"""

import numpy as np


def getFirstCurve(images, starCoords, n = 10): #Corba de llum
    """
    params:
        images: list containing all the frames
        starCoords: list containing the coordinates of the stars detected
        n = size of the mask
    return
        curve generated by the mean of the mask along all the frames
    """
    curves = []
    tmp = np.array(images)
    for star in starCoords:
        star_value = []
        xl = max(0, min(int(star[1])-n, len(images[0])))
        xr = max(0, min(int(star[1])+n+1, len(images[0])))
        yl = max(0, min(int(star[0])-n, len(images[0][0])))
        yr = max(0, min(int(star[0])+n+1, len(images[0][0])))
        maskFrame = tmp[:,xl:xr, yl:yr]
        for i in range(len(maskFrame)):
            star_value.append(np.mean(maskFrame[i]))
        curves.append(star_value)
        
    return curves

def getBetterCurves(lightCurve): #Corba de llum mitjana veins
    """
    params:
        lightCurve: list containing all the curves obtained
    return
        list of light curves enhanced using the mean with the neighbours
    """
    curves = []
    for light in lightCurve:
        res = []
        for i in range(1,len(light)-1):
            mean = np.mean(light[i-1:i+1])
            res.append(mean)
        curves.append(res)
    return curves
    

def getCurves(images, starCoords):
    """
    params:
        images: list containing all the frames
        starCoords: list containing the coordinates of the stars detected
    return
        list of curves obtained from all the stars detected
    """
    print("Getting curves...")
    myCurves = getFirstCurve(images, starCoords)
    myBetterCurves = getBetterCurves(myCurves)
    print("Done!")
    return myBetterCurves




